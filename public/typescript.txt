TYPESCRIPT TUTORIAL

what is typescript ?

-alternative language to javascript, it's a superset of javascript language which means it extends the language with new features and syntax.

-browsers by default don't understand typescript like they do javascript, so we have to compile it into javascript first in order for browsers to understand it.

-javascript with types

-first significant features is possibility of using strict types, which means that we can't change previously declared type of a value, error checking process is more practical and the code is cleaner

-it supports modern features of js like arrow funcs and let/const, it can translate to older javascript code which doesn't support these features

-it has some extra features, like generics, interfaces, tuples etc.

project for this practice will be a simple finance logger to notify dynamic payments and invoices

we need to install typescript compiler

in main command prompt: 
npm i -g typescript 

part 1: compiling typescript

have some html & css code prepared

to simply compile typescript code, type next thing in terminal:
tsc main.ts main.js
if the files are of the same name you can simply type:
tsc main.ts

there is an error that appears after compiling ts code, but this error doesn't affect anything 'cause it's from a typescript file and that file never appears itself in a real code

we don't have to manually compile ts code every time, there is a way for it to be automatically updated, just type this in terminal:
tsc main.ts -w

part 2: type basics

main fundamental difference between ts and js is that typescript uses strict types. That means that if we define a variable as a string it will always be a string in typescript, same goes for other types. There is a number type which covers all of integers, floats and doubles in one.

In typescript we can define the type of an argument for a function

Type checking isn't done in runtime in the browser, rather it's done before we compile. It will not compile to javascript if a wrong type is being sent.

part 3: objects and arrays

when we declare a new array, the types that we initially assign to the array cannot be changed afterwards. We can declare a mixed array if we want to. If we declare an empty object, it can contain any type.

properties inside of an object function the same way as variables do in arrays. If we declare a property to be of one type, we can't change that type. We cannot add extra properties once we've defined the object.  We cannot also override types of arrays and objects, so if we declare an array we can't change it to be a string or number, same goes for objects. We can declare a new array or object with the same name as a previous array or object. For objects it goes further, once we declare an object and define its properties we have to have all of those props if we want to override it's values.

Typescript is quite strict when it comes type definitions, but down the line that's a good thing, because it will prevent errors.

part 4: explicit types

when we write our variables and assign values, typescript automatically infers their type.
Sometimes it's better to initialize the variable without giving out a value, so it won't infer 
it's type and we can give anything to it later on.

We can explicitly give variable a type. So we initialize the variable, without giving it a value but in future only the type we assigned it to can be given to it.

Explicit types are given fairly simply. Arrays are given similar to some classic programming languages, 
so for example string array is string[], boolean array is boolean[] etc.

It is commendable to initialize it to be an empty array to begin with, because 
then we can do .push() method on it.

For mixed arrays we use union types, which is declared similarly to arrays,
except we put all the types we want in brackets so something like this: (string|number)

Union types can also be used for normal variables, not just for arrays.
One thing that is allowed in ts is conversion of objects to arrays, because 
array are in a way a type of object

part 5: dynamic/any types

we can declare a variable to be of any type. 
What this means essentially is that if we declare this variable
to be a number at the start, it can be subsequently changed to 
a boolean or string or whatever. So this kind of represents classic
javascript variables, it's not generally useful but it's there just in case

part 6: workflow & tsconfig

for one ts file we get one js file
but in case of a bigger project we might have multiple ts/js files 
separated in multiple folders
usually there are two folders, one is public for final public stuff
which we deploy, and there is src folder where our source code goes
like ts files

we can initialize tsconfig.json file, which contains typescript 
compiling and configuration options for that just 
type in root folder in terminal:
tsc --init

we then define the root directory to be ./src
and out directory to be ./public

now we can just type:
tsc 
or
tsc -w
to compile our ts code

to include only files inside of the src folder, add a property
at the end that goes "include":["src"], with this
it won't compile anything outside the src folder

part 7: function basics

function type in ts
ts automatically infers that the type of the variable is a function
if declared that way, similar way to strings, numbers and booleans

it can also be explicitly declared

in typescript void and undefined are separate values

part 8: type aliases

sometimes when we specify types in parameters there can be a lot of
reudndant code, so there are type aliases for this kind of stuff

part 9: function signatures

since we can declare that a variable can be any type of function,
we can go step further by specifying a function signature,
that is a general structure of a function like what type of data
it returns. 

the name we give to the arguments in function signature doesn't
have to be the same name when we create a function object of this
signature

part 10: dom interaction & typecasting

just like js, we can use ts to interact with the dom
we can still access all of the same properties inside of dom
there are a few different differences though:
typescript doesn't actually know whether there is a certain element
in html page, so it returns possible null object

ts recognizes special html types so it has different properties,
so if we use query selector for an anchor tag, it will know
that the object is an HTMLAnchorElement and it has all of it's
properties

part 11: classes

classes are very similar to js, i.e. blueprint for an object

part 12: public, private & readonly

all properties in classes in js/ts are public by default 
we can use access modifiers to determine
how a user access different properties in a class

with private property, we can access it using a method inside of 
a class, but we cannot access it from outside of a class
on the instance directly, so it won't compile it that way

readonly means that we cann access it from both inside and outside
of a class, but we cannot change it

part 13: modules

it's typically better to have multiple files for different
stuff in ts/js, that makes project more structured and easier
to maintain. For that we use ES6 module system.
This requires modern browsers to work.

for starters, go to tsconfig and change module to es2015
and change target to es6
change in index.html script tag to be a module

part 14: interfaces

interface allows us to enforce a certain structure of a class
or an object, we can use it to describe what properties or methods
there are. We just use it to enforce the certain structure of class
or object.

part 15: interfaces with classes

every instance of an object that we create from a class
that implements certain interface has to follow the structural 
rules enforced by the interface

part 16: rendering an html template

registering a list container, i.e. ul in the constructor
and then create a render method to render a new li to the container
which will accept arguments, and then create a html template of li
and add it to the end of the list

part 17: generics

generics are a feature that allow us to create reusable blocks of 
code which can be used with different types